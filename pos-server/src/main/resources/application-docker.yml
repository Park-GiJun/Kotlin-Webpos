server:
  port: 8080

spring:
  application:
    name: pos-server
  
  # Database configuration for Docker environment (separate POS database)
  datasource:
    url: jdbc:mysql://mysql-pos:3306/pos_server
    username: ${SPRING_DATASOURCE_USERNAME:posuser}
    password: ${SPRING_DATASOURCE_PASSWORD:pospassword}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 10
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    database-platform: org.hibernate.dialect.MySQLDialect
    properties:
      hibernate:
        format_sql: false
        use_sql_comments: false
  
  # Redis configuration for Docker (shared with main-server)
  data:
    redis:
      host: ${SPRING_REDIS_HOST:redis}
      port: 6379
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-wait: -1ms
          max-idle: 8
          min-idle: 0
  
  # Kafka configuration for Docker
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: pos-server-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer

# Actuator for health checks
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized

# MSA Service Communication
microservice:
  main-server:
    url: ${MAIN_SERVER_URL:http://main-server:8080}

# Service discovery (future feature)
# eureka:
#   client:
#     service-url:
#       defaultZone: http://eureka-server:8761/eureka/
#   instance:
#     prefer-ip-address: true